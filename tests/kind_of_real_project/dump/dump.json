{
    "initialized": [
        {
            "order": 1,
            "type": "*config.Config",
            "id": "",
            "file": "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/config/config.go",
            "line_start": 16,
            "line_end": 34,
            "direct_deps": null
        },
        {
            "order": 2,
            "type": "*system.DB",
            "id": "",
            "file": "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/system/db.go",
            "line_start": 28,
            "line_end": 33,
            "direct_deps": [
                {
                    "type": "*config.Config",
                    "id": ""
                }
            ]
        },
        {
            "order": 3,
            "type": "*repo.UserRepo",
            "id": "UserRepo1",
            "file": "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/repo/user_repo.go",
            "line_start": 25,
            "line_end": 29,
            "direct_deps": [
                {
                    "type": "*system.DB",
                    "id": ""
                }
            ]
        },
        {
            "order": 4,
            "type": "*repo.UserRepo",
            "id": "UserRepo2",
            "file": "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/repo/user_repo.go",
            "line_start": 30,
            "line_end": 34,
            "direct_deps": [
                {
                    "type": "*system.DB",
                    "id": ""
                }
            ]
        },
        {
            "order": 5,
            "type": "service.Mailing",
            "id": "Mailing",
            "file": "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/service/mailing.go",
            "line_start": 37,
            "line_end": 46,
            "direct_deps": [
                {
                    "type": "*repo.UserRepo",
                    "id": "UserRepo1"
                },
                {
                    "type": "*repo.UserRepo",
                    "id": "UserRepo2"
                }
            ]
        },
        {
            "order": 6,
            "type": "[]run.A",
            "id": "",
            "file": "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/run/run.go",
            "line_start": 11,
            "line_end": 16,
            "direct_deps": null
        }
    ],
    "files": {
        "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/config/config.go": [
            "package config",
            "",
            "import (",
            "\t\"context\"",
            "\t\"github.com/sabahtalateh/gic\"",
            "\t\"gopkg.in/yaml.v3\"",
            "\t\"os\"",
            ")",
            "",
            "type Config struct {",
            "\tDB struct {",
            "\t\tDSN string `yaml:\"dsn\"`",
            "\t} `yaml:\"db\"`",
            "}",
            "",
            "func init() {",
            "\tgic.Add[*Config](",
            "\t\tgic.WithInitE(func() (*Config, error) {",
            "\t\t\tbb, err := os.ReadFile(\"./config.yaml\")",
            "\t\t\tif err != nil {",
            "\t\t\t\treturn nil, err",
            "\t\t\t}",
            "",
            "\t\t\tconf := new(Config)",
            "\t\t\tif err = yaml.Unmarshal(bb, conf); err != nil {",
            "\t\t\t\treturn nil, err",
            "\t\t\t}",
            "",
            "\t\t\treturn conf, nil",
            "\t\t}),",
            "\t\tgic.WithStart(func(ctx context.Context, t *Config) error {",
            "\t\t\treturn nil",
            "\t\t}),",
            "\t)",
            "}",
            ""
        ],
        "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/repo/user_repo.go": [
            "package repo",
            "",
            "import (",
            "\t\"github.com/sabahtalateh/gic\"",
            "\t\"github.com/sabahtalateh/gic/tests/kind_of_real_project/system\"",
            ")",
            "",
            "type UserRepo struct {",
            "\tdb *system.DB",
            "}",
            "",
            "func (u *UserRepo) Select(id int) string {",
            "\tswitch id {",
            "\tcase 0:",
            "\t\treturn \"Ivan\"",
            "\tcase 1:",
            "\t\treturn \"Petr\"",
            "\tdefault:",
            "\t\treturn \"Anonymous\"",
            "\t}",
            "}",
            "",
            "var Repo1, Repo2 = gic.ID(\"UserRepo1\"), gic.ID(\"UserRepo2\")",
            "",
            "func init() {",
            "\tgic.Add[*UserRepo](",
            "\t\tgic.WithID(Repo1),",
            "\t\tgic.WithInit(func() *UserRepo { return \u0026UserRepo{db: gic.MustGet[*system.DB]()} }),",
            "\t)",
            "",
            "\tgic.Add[*UserRepo](",
            "\t\tgic.WithID(Repo2),",
            "\t\tgic.WithInit(func() *UserRepo { return \u0026UserRepo{db: gic.MustGet[*system.DB]()} }),",
            "\t)",
            "}",
            ""
        ],
        "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/run/run.go": [
            "package run",
            "",
            "import (",
            "\t\"github.com/sabahtalateh/gic\"",
            "\t\"github.com/sabahtalateh/gic/tests/kind_of_real_project/service\"",
            ")",
            "",
            "type A struct {",
            "}",
            "",
            "func init() {",
            "\tgic.Add[[]A](",
            "\t\tgic.WithInit(func() []A {",
            "\t\t\treturn []A{{}, {}}",
            "\t\t}),",
            "\t)",
            "}",
            "",
            "func Run() []string {",
            "\t_ = gic.ConfigureGlobalContainer(",
            "\t\tgic.WithDump(gic.WithDumpDir(\"./dump\")),",
            "\t)",
            "",
            "\tif err := gic.Init(); err != nil {",
            "\t\tpanic(err)",
            "\t}",
            "",
            "\tm, err := gic.Get[service.Mailing](gic.WithID(service.MailingID))",
            "\tif err != nil {",
            "\t\tpanic(err)",
            "\t}",
            "",
            "\tres := m.Send()",
            "",
            "\treturn res",
            "}",
            ""
        ],
        "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/service/mailing.go": [
            "package service",
            "",
            "import (",
            "\t\"fmt\"",
            "\t\"github.com/sabahtalateh/gic\"",
            "\t\"github.com/sabahtalateh/gic/tests/kind_of_real_project/repo\"",
            ")",
            "",
            "type Repo interface {",
            "\tSelect(int) string",
            "}",
            "",
            "type Mailing struct {",
            "\tuserRepo1 Repo",
            "\tuserRepo2 Repo",
            "}",
            "",
            "func (m *Mailing) Send() []string {",
            "\tvar (",
            "\t\tuu  []string",
            "\t\tout []string",
            "\t)",
            "",
            "\tfor i := 0; i \u003c 3; i++ {",
            "\t\tuu = append(uu, m.userRepo1.Select(i))",
            "\t}",
            "",
            "\tfor _, u := range uu {",
            "\t\tout = append(out, fmt.Sprintf(\"sending message to %s\", u))",
            "\t}",
            "",
            "\treturn out",
            "}",
            "",
            "var MailingID = gic.ID(\"Mailing\")",
            "",
            "func init() {",
            "\tgic.Add[Mailing](",
            "\t\tgic.WithID(MailingID),",
            "\t\tgic.WithInit(func() Mailing {",
            "\t\t\treturn Mailing{",
            "\t\t\t\tuserRepo1: gic.MustGet[*repo.UserRepo](gic.WithID(repo.Repo1)),",
            "\t\t\t\tuserRepo2: gic.MustGet[*repo.UserRepo](gic.WithID(repo.Repo2)),",
            "\t\t\t}",
            "\t\t}),",
            "\t)",
            "}",
            ""
        ],
        "/Users/kravtsov777/Code/go/src/github.com/sabahtalateh/gic/tests/kind_of_real_project/system/db.go": [
            "package system",
            "",
            "import (",
            "\t\"github.com/sabahtalateh/gic\"",
            "\t\"github.com/sabahtalateh/gic/tests/kind_of_real_project/config\"",
            ")",
            "",
            "type DB struct {",
            "\tdsn string",
            "}",
            "",
            "func (d *DB) Query(q string) string {",
            "\tif q == \"select user where id = 1\" {",
            "\t\treturn \"Ivan\"",
            "\t}",
            "",
            "\tif q == \"select user where id = 2\" {",
            "\t\treturn \"Petr\"",
            "\t}",
            "",
            "\tif q == \"select user where id = 3\" {",
            "\t\treturn \"Vasisualiy\"",
            "\t}",
            "",
            "\treturn \"anonymous\"",
            "}",
            "",
            "func init() {",
            "\tgic.Add[*DB](",
            "\t\tgic.WithInit(func() *DB {",
            "\t\t\treturn \u0026DB{dsn: gic.MustGet[*config.Config]().DB.DSN}",
            "\t\t}),",
            "\t)",
            "}",
            ""
        ]
    },
    "stages": [
        {
            "id": "Start",
            "order": "",
            "parallel": true
        },
        {
            "id": "Stop",
            "order": "",
            "parallel": true
        }
    ],
    "stage_impls": {
        "Start": [
            {
                "type": "*config.Config",
                "id": ""
            }
        ]
    }
}